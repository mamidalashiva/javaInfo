Java 8 Features:
1. Lamdba Expressions
2. Functional Interface
3. Default Methods
4. forEach
5. Method References
6. Stream
7. DateTime API
8. Optionals


1.Lambda expressions:
    A landba expression is just an anonymous function and they are passed (mostly) to other functions as parameters.The most important
    feature of  Lamdba Expression is that "they execute in the context of 
    their  appearance.So, similar lamdba expression can be executed differently in some other context.
    Syntax:
        (x, y) -> x + y // This function takes twoparamters and return sum.
    Ex:
    1. (int a, int b) ->    a * b 
    2. (a, b) ->   a - b 
    3. () -> 99
    4. (String s)-> System.out.println(s);
    5. a->2*a;
    6. c->{/* some complex statement*/}
    
 2. Functional Interface:
    Single Abstract method interfaces.Java 8, enforces the rule of single responsibility by making these interfaces with a new annotation.
    i.e. @FunctionalInterface.
    Do's & Don'ts:
    * A functional interface has exactly one abstract method.Since default methods have an implementation,they are not abstract.Free to add 
    default  methods to your  functional interface as many as you like.
    * Only one abstract method is allowed.
    * Functional interface is valid even if you remove the @FunctionlaInterface annotation would be ommitted.
    * If an inteface declares an abstract method overriding one of the publc methods of java.lang.Object,that also does not count towards 
    the interface's abstract method count.
    
 Ex:
        @FunctionalInterface
        public interface MyFirstFunctionalInterface {
        public void firstWork();
        @Override
        public String toString();                //Overridden from Object class
        @Override
        public boolean equals(Object obj);        //Overridden from Object class
        }
    
    Ref:https://stackoverflow.com/questions/27743315/a-summary-of-the-parameters-and-return-type-of-functional-interfaces-in-the-pack/28162720#28162720
    
 3. Default Methods:
    Definition:Defaul methods enable you to add new functionality to the interfaces of your libraries and ensure binary compatibility 
    with code written for older versions of those interfaces.
    Ex: public interface Moveable{
        default  void move(){
        System.out.println("move default method");
        }
    }
    Use: To enable the functionality of Lamdba expression in java.Lambda expressions are essentially of type of functional interface.
    How conflicts are resolved:
    1. Most preffered are the overridden  in classes.They will be matched and called if found before matching anything.
    2. The method with same signature in the "most specific default providing interface" is selected.
        Ex: if class Animal implements two interfaces i.e. Moveable and Walkable such that Walkable exends Moveable.Then Walkable is here
        most specific interface and default method will be chosen from here if method signature is matched.
        
    
        
 
 
 4. forEach:
    Default implementation of java forEach method(default) in interable interface.
    Ex: List<Integer> numberList = new ArrayList<>(Arrays.asList(1,2,3,4,5));
    Consumer<Integer> action = Ststem.out::print;
    
    listObj.stream().forEach(action);
 
8. Optionals:
  Optional is a way of replacing nullable T references with a non-null value.
  An Optional may contain either non-null T reference or nothing.
  
  I) Creation of Optional Objects:
    There are 3 major ways to create an Optional. 
    1. Use Optional.empty() to create empty optional
       Optional<Integer> obj = Optional.empty();
      
    2. Use Optioinal.of() to create optional with default non-null value.
      Optional<Integer>  obj = Optional.of(5);
      Optional<Integer> nullOptionalObj = Optional.of(null); // thrown NullPoniter exception.
    
    3.Use Optional.ofNullable() to create an Optional object that may hold null value.
      Optional<Integer> possible = Optional.ofNullable(null); // Result obj would be empty.O/P:Optional.empty
      Optional<Integer> possible = Optional.ofNullable(5); O/P: OPtional[5].

  II) Do something  if value is present
      1.Optional<Integer> obj = Optional.of(5);
      obj.ifPresent(System.out::print);
    
  III) What optional is not trying to solve?
      Please note that Optional is not meant  to be used in these below contexts.
      1. In domain model layer(not serializable)
      2. in DTO's (its not serializable)
      3. in input parameters of methods
      4. in constructor parameters.
   IV) How should Optional is Used
      Optional should be used almost all the time as the return type of functions.
    
    
  
